【ACT4】
L[1]
L[0]
L[-1]
L[0:-1]    #正向取值
L[1][2]
len(L)
L[1] = value
L1 + L2
L * 3
del L[1]
L.remove(value)
range(len(L))
    for i in range(len(L))
        print(str(i),L[i])
L[1,2,3]
    A,B,C = L
L.index()  #返回所找值的下标
L.append()
L.insert()
L.sort()    #方法无返回值，print（L.sort())为None
sorted()    #会返回一个新的已经排好序的 list
print(L[random.randict(0,len(L)-1)])
('hello',)    #有',',是tuple，无','，是str
L1=[1，2，3]
    L2 = L1
    L2[1] = 5
    L2 = [1，5，3]
    L1 = [1，5, 3]   #变量包含对列表值的引用，而不是列标值本身。但对于字符串和整数值，变量就包含了字符串或整数值。
    L3 = copy.copy(L1)    #修改L3列表值不会影响L1
copy.copy() & copy.deepcopy()
    import copy
    # copy 和 deepcopy 的区别
    l1 = [1, 2, 3, ['a', 'b']]
    # copy 浅复制，不会拷贝其子对象，修改子对象，将受影响
    l2 = copy.copy(l1)
    # deepcopy 深复制，将拷贝其子对象，修改子对象，将不受影响
    l3 = copy.deepcopy(l1)
    l1[3].append('c')
    print 'l1:', l1
    print 'l2:', l2
    print 'l3:', l3
    output:
    l1: [1, 2, 3, ['a', 'b', 'c']]
    l2: [1, 2, 3, ['a', 'b', 'c']]
    l3: [1, 2, 3, ['a', 'b']]


【ACT5】
dict = {'a': 'A', 'b': 'B'}
dict.values()
dict.keys()
    dict_keys(['b', 'a'])
dict.items()
    dict_items([('b', 'B'), ('a', 'A')])
for k,y in dict.items():
    print(key,v)
    output:b,B
           a,A
dict.get('a',0)
    'A'
dict.get('1',0)
    0
dict.setdefault()
pprint    #漂亮输出，并排序


【ACT6】
l = 'Helloword'
    l[1:5]
    output:'ello'
for i in l:
if hello (not)in l:
l.lower()
l.upper()    #不改变l本身，如要改变l，需要 l = l.upper，此类方法均如是
l.isupper()    #有一个大写字母即为True
    True
l.islower()    #有一个小写字母即为True
    True
l.isalpha()
l.isalnum()
l.isdecimal()
l.isspace()
l.istitle()
l.startswith('Hello')
    output:True
l.endswith('world')
    output:True
'!'.join(['a','b','c'])    #列表合成为字符串
    output:'a!b!c'
'!'.john('hello world haha'.split())
    hello!world!haha    #没有split为h!e!l!l!o! !w!...
l.split('e')
    out:['h', 'lloworld']    #字符串拆分成列表
l.rjust(11)    #因为l本身为10个字符，所以需最小11才能空1位
    out:' helloworld'
l.ljust(12,'*')
    out:'helloworld**'
l.center(11)
    out:' helloworld'
l.center(12,'=')
    out:'=helloworld='
l.strip()   #只删除字符串收尾两端外的空格，例如' hello world '，中间空格保留
l.lstrip()
l.rstrip()
pyperclip    #复制粘贴模块
pyperclip.copy('hello')  #处理字符串
pyperclip.paste()
创建bat批处理工具
    新建文本文件，输入
    @py.exe C:文件路径 %*
    @pause
    保存为.bat文件，放到C:\windows下，直接WIN+R中运行py文件名即可


【ACT7】
print(r'\n')  #r代表禁止字符串转译
import re
phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
mo = phoneNumRegex.search('my number is 425-222-2222')
print(mo.group())

phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d)-(\d\d\d\d)')
mo = phoneNumRegex.search('my number is 425-222-2222')
print(mo.group(0))
    out:425-222-2222
print(mo.group(1))
    out:425
mo.group(2)或3,out:222或2222
mo.groups()
    out:('425','222','2222')
a,b,c = mo.groups()
    print(a)
        out:425
    print(b)
        out:222
'A|B'  'B LLL A' out:B    #输出先检索到的
serach()    #只返回先检索到的
findall()    #返回所有检索到的，且返回一个列表
phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
mo = phoneNumRegex.findall('my number is 425-222-2222 and 111-222-3333')
print(mo)
    ['425-222-2222', '111-222-3333']

phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d)-(\d\d\d\d)')    #有分组
mo = phoneNumRegex.search('my number is 425-222-2222 and 111-222-3333')
print(mo.findall())
    out:[('425','222','2222'),('111','222','3333')]

A(B|C)  'AC LLL B' out:AC且group(1) out:C
A(B)?C  'AC LLL B' out:AC  'ABC LLL B' out:ABC  #()?表示()内内容出现了0次或1次
    （）*  #*代表出现0次或多次
    （）+  #+代表匹配1次或多次
    （）{n,m}  #{}表示出现特定n次，或n到m次，例如{3}为3次，{3,5}为3到5次，{3，}为3次或以上，{,5}为0到5次

greedyHaRegex = re.compile(r'(Ha){3,5}')
mo = greedyHaRegex.search('HaHaHaHaHa')
print(mo.group())
    out:HaHaHaHaHa    #贪心匹配
greedyHaRegex = re.compile(r'(Ha){3,5}?')
mo = greedyHaRegex.search('HaHaHaHaHa')
print(mo.group())
    out:HaHaHa    #{}后加?，即为费贪心匹配，匹配花括号内最小值

\d  数字
\D  数字以外所有
\w  字母，数字，下划线
\W  除字母，数字，下划线以外，所有
\s  空格，制表符，回车
\S  除空格，制表符，回车之外所有

[aeiouAEIOU]    #括号内元素为或的关系
[^aeiouAEIOU]    #字符分类中的^符号代表  非
^aeiou$    #以aeiou开始且结束，绝对匹配，子集不符合规则
.    #通配符，匹配除换行之外的任意字符
.*    #匹配任意次任意字符，除换行外

(r'.*',re.DOTALL)  #句点.可匹配换行符，即\n,没有re.DOTALL时，'.*'只匹配到换行符之前
(r'ab',re.I)    #不区分大小写

names = re.compile(r'Agent \w+')
names.sub('censored','Agent Alice gave ...')    #sub()为替换
    out:'censored gave ...'
names = re.compile(r'Agent (\w)\w*')
names.sub(r'\1****','Agent Alice gave ...')    #\1代表group(1)的输出，及(\w)代表的Alice的A
    out:'A**** gave ...'


【ACT 8】
os.path.join('usr', 'bin', 'spam')
    out:'usr\\bin\\spam'
os.getcwd()     #查看当前工作路径
os.chdir('C:\\Window\\System32')        #改变当前工作路径
os.makedirs('C:\\aa\\bb\\cc')       #创建文件夹,如果没有aa,bb也会创建aa和bb文件夹
os.path.abspath('path')     #将相对路径转换为绝对路径
os.path.isabs('path')       #如果是绝对路径返回True，是相对路径返回False
os.path.relpath(path,start)     #返回start开始到path的相对路径字符串，如无start，则从当前路径开始
    os.path.relpath('C\\Windows', 'C:\\spam\\eggs')
        out:'..\\..\\Windows'
os.path.dirname('C:\\AA\\BB\\CC')       #取目录名臣
    out:'C:\\AA\\BB'
os.path.basename('C:\\AA\\BB\\CC')      #取文件名称
    out:'CC'
os.path.split('C:\\AA\\BB\\CC')     #同时取目录名和文件名,返回一个元祖
    out:('C:\\AA\\BB', 'CC')
('C:\\AA\\BB\\CC').split(os.path.sep)       #输出每个路径字符串列表
    out:['C:', 'AA', 'BB', 'CC']
os.path.getsize(path)       #输出路径下文件的字节数
os.listdir(path)        #输出路径下文件名列表
os.path.exists(path)        #文件或文件夹存在，返回True
os.path.isfile(path)        #path参数存在且为文件，返回True
os.path.isdir(path)     #path参数存在且为文件夹，返回True
helo = open('C:\\Users\\daize\\Desktop\\test.txt')      #open()返回一个file对象,默认为'r'
helo.read()     #读取helo中内容
helo.readlines()    #讲helo内容取出得到一个字符串列表，每个字符串为helo中一行

helo = open('C:\\Users\\daize\\Desktop\\test.txt', 'w')
helo.write('haha')
helo.close()
helo = open('C:\\Users\\daize\\Desktop\\test.txt', 'a')
helo.write('haha')
helo.close()
#'w'为清空文件并写入，'a'为不清空文件且添加内容。如对应路径文件不存在，会主动创建。在读取或写入后需要close()，然后才能再次打开。
#write()方法不会像print()方法一样自动添加换行符(\n)，需要手动添加。

shelve      #例如可以保存配置，在此打开程序时加载这些配置
import shelve
shelfFile = shelve.open('mydata')       #定义的shelFile类似字典
cats = ['a', 'b', 'c']      #创建cats列表
shelfFile['cats'] = cats        #创建cats键，值为cats列表，即生成一个字典
shelfFile.close()
shelfFile = shelve.open('mydata')       #打开mydata，shelve默认可读可写
shelfFile['cats']
    out:['a', 'b', 'c']
shelfFile.close()
#是生成真正列表形式
shelfFile = shelve.open('mydata')
list(shelfFile.keys())
    out:['cats']
list(shelfFile.values())
    out:[['a', 'b', 'c']]
shelfFile.close()

pprint.pformat()        #可保存变量


【ACT9】
import shutil       #在python程序中复制，移动，改名和删除文件
shutil.copy(source,destinasion)     #复制文件，从source到destinasion，sor和des均为字符串，des如为文件名，则为复制后的新名字
    shutil.copy('C:\\Windows\\aa', 'D:\\B')     #B为文件夹
        out:'D:\\B\\aa
    shutil.copy('C:\\Windows\\aa', 'D:\\bb')        #bb为文件名
        out:'D:\\bb
shuttil.copytree(source,destinasion)        #复制整个文件夹及包括的文件夹和文件，用法同shutil.copy()
    shutil.copytree('C:\\AA', 'C:\\AA_BAK')
        out:'C:\\AA_BAK'

shutil.move(source,destinasion)     #剪切，des为文件夹，直接放到该文件夹下；des为文件名，放到目标目录下并改为des名，如同名，直接覆盖

os.unlink(path)     #删除path处的文件
os.rmdir(path)      #删除path处的文件夹，且必须为空文件夹
shutil.rmtree(path)     #删除path处文件夹及其下所有文件夹和文件

import send2trash       #删除文件发送到回收站，而非永久删除

os.walk()       #遍历目录树
for foldername, subfolders, filenames in os.walk('c:\\Windows'
    print('current folder:' + foldername)
    for subfolder in subfolders:
        print(foldername,subfolder)
    for filename in filenames:
        print(foldername,filename)
out:current folder A
    subfolder A1
    subfolder A2
    filename a

    current folder A1
    subfolder A1-1
    aubfolder A1-2
    filename aa

    current folder A2
    xxxxxxxxx

    current folder A1-1
    xxxxxxxxx

import zipfile      #查看压缩文件信息
exampleZip = zipfile.ZipFile('example.zip')     #打开zip文件传递给变量，如open()
exampleZip.namelist()       #返回zip包里的文件名的字符串列表
    out:['a.txt', 'A/']
aInfo = exampleZip.getinfo('a.txt')     #讲zip包内的文件信息传递给aInfo变量
aInfo.file_size     #字节数
    out:111
aInfo.compress_size     #压缩后的字节数
    out:22
round(aInfo.file_size / aInfo.compress_size, 2)     #压缩比，四舍五入至第二位
exampleZip.close()

import zipfile      #解压缩
exampleZip = zipfile.ZipFile('example.zip')
exampleZip.extractall(path)     #解压缩包内所有文件至path，如path中文件夹不存在，则创建。没有path参数，默认解压到当前目录
exampleZip.extract('a.txt', 'C:\\A')        #解压包内文件a.txt至C:\A目录下,返回值为解压后文件的绝对路径
    out:'C:\\A\\a.txt'
exampleZip.close()

import zipfile      #创建和添加到zip文件
newZip = zipfile.ZipFile('new.zip', 'w')        #如已有new.zip，则w会擦除原有文件
newZip = zipfile.ZipFile('new.zip', 'a')        #如已有new.zip，则a会添加新内容到原有文件
newZip.write('a.txt', compress_type=zipfile.ZIP_DEFAULTED)
newZip.close()
